language: cpp
dist: trusty
python:
  - "3.8"
    
matrix:
  include:
    - name: 'Linux Gcc C++17 Debug'
      os: linux
      compiler: gcc
      env: GCC_VERSION=9 BUILD=Debug STANDARD=17 CODE_COVERAGE=OFF VALGRIND=OFF ASAN=OFF TSAN=OFF SONAR=OFF
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: [g++-9, cmake, cmake-data]
        sonarcloud:
          organization: "odygrd"
    
    - name: 'Linux Gcc C++17 Release With Valgrind'
      os: linux
      compiler: gcc
      env: GCC_VERSION=9 BUILD=Release STANDARD=17 CODE_COVERAGE=OFF VALGRIND=ON ASAN=OFF TSAN=OFF SONAR=OFF
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: [g++-9, valgrind, cmake, cmake-data]

    - name: 'Linux Gcc7 C++17 Debug with Code Coverage'
      os: linux
      compiler: gcc
      env: GCC_VERSION=7 BUILD=Coverage STANDARD=17 CODE_COVERAGE=ON VALGRIND=OFF ASAN=OFF TSAN=OFF SONAR=OFF
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: [g++-7, cmake, cmake-data, lcov]

    - name: 'Linux Gcc C++14 Debug'
      os: linux
      compiler: gcc
      env: GCC_VERSION=5 BUILD=Debug STANDARD=14 CODE_COVERAGE=OFF VALGRIND=OFF ASAN=OFF TSAN=OFF SONAR=OFF
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: [g++-5, cmake, cmake-data]

    - name: 'Linux Gcc C++14 Release'
      os: linux
      compiler: gcc
      env: GCC_VERSION=5 BUILD=Release STANDARD=14 CODE_COVERAGE=OFF VALGRIND=OFF ASAN=OFF TSAN=OFF SONAR=OFF
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: [g++-5, cmake, cmake-data]

    - name: 'Linux Gcc C++17 Release ARM64'
      os: linux
      arch: arm64
      compiler: gcc
      env: GCC_VERSION=9 BUILD=Release STANDARD=17 CODE_COVERAGE=OFF VALGRIND=OFF ASAN=OFF TSAN=OFF SONAR=OFF
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: [g++-9, cmake, cmake-data]

    - name: 'MacOs Clang C++17 Release with Address Sanitiser'
      os: osx
      osx_image: xcode11.2
      env: BUILD=Release STANDARD=17 CODE_COVERAGE=OFF VALGRIND=OFF ASAN=ON TSAN=OFF SONAR=OFF
      compiler: clang

    - name: 'MacOs Clang C++17 Release with Thread Sanitiser'
      os: osx
      osx_image: xcode11.2
      env: BUILD=Release STANDARD=17 CODE_COVERAGE=OFF VALGRIND=OFF ASAN=OFF TSAN=ON SONAR=OFF
      compiler: clang

    - name: 'MacOs Clang C++14 Debug'
      os: osx
      env: BUILD=Debug STANDARD=14 CODE_COVERAGE=OFF VALGRIND=OFF ASAN=OFF TSAN=OFF SONAR=OFF
      compiler: clang

    - name: 'MacOs Clang C++14 Release'
      os: osx
      env: BUILD=Release STANDARD=14 CODE_COVERAGE=OFF VALGRIND=OFF ASAN=OFF TSAN=OFF SONAR=OFF
      compiler: clang

before_install:
  - if [ -n "$GCC_VERSION" ]; then export CXX="g++-${GCC_VERSION}" CC="gcc-${GCC_VERSION}"; fi
  - if [ -n "$CLANG_VERSION" ]; then export CXX="clang++-${CLANG_VERSION}" CC="clang-${CLANG_VERSION}"; fi

  # On MacOs use the default system compiler version
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export CXX="clang++" CC="clang"; fi

  # Install gcov for coverage build
  - if [[ "$CODE_COVERAGE" == "ON" ]]; then sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-7 800; gcov --version; fi

  - ${CXX} --version
  - cmake --version

install:
  # Install codecov
  - if [[ "$CODE_COVERAGE" == "ON" ]]; then sudo -H pip install --upgrade pip; sudo -H pip install codecov --ignore-installed; fi

script:
  - cd ${TRAVIS_BUILD_DIR}
  - mkdir -p build && cd build
  - |
    cmake .. \
      -DCMAKE_BUILD_TYPE=$BUILD \
      -DCMAKE_CXX_STANDARD=$STANDARD \
      -DQUILL_SANITIZE_ADDRESS=$ASAN \
      -DQUILL_SANITIZE_THREAD=$TSAN \
      -DQUILL_USE_VALGRIND=$VALGRIND \
      -DQUILL_BUILD_TESTS=ON \
      -DQUILL_BUILD_EXAMPLES=ON \
      -DQUILL_VERBOSE_MAKEFILE=ON
  - cd ..
  
  - if [[ "$SONAR" == "OFF" ]]; then cmake --build build/ ; else build-wrapper-linux-x86-64 --out-dir bw-output cmake --build build/ ; fi
  - if [[ "$SONAR" == "ON" ]]; then sonar-scanner -Dsonar.cfamily.build-wrapper-output=bw-output; fi
  
  - cd build
  
  # If we enabled valgrind then call ctest with memcheck, otherwise just call it normal
  - if [[ "$VALGRIND" == "ON" ]]; then ctest -T memcheck --verbose; else if [[ "$CODE_COVERAGE" == "ON" ]]; then make coverage; else ctest --verbose; fi fi

  # Code Coverage
  - if [[ "$CODE_COVERAGE" == "ON" ]]; then codecov; fi

after_success:
  # Code Coverage
  - if [[ "$CODE_COVERAGE" == "ON" ]]; then lcov --list coverage_out.info.cleaned; fi
  - if [[ "$CODE_COVERAGE" == "ON" ]]; then bash <(curl -s https://codecov.io/bash) -f coverage_out.info.cleaned || echo "Codecov did not collect coverage reports"; fi

branches:
  only:
    - master
    - /.*/

notifications:
  email: false
